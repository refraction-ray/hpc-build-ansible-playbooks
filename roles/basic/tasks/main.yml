---
# tasks file for basic
- name: ensure en locale
  become: yes
  locale_gen:
    name: en_US.UTF-8
    state: present
- name: ensure timezone
  become: yes
  timezone:
    name: "{{ timezone }}"
  register: tz
- name: sync the timezone of rsyslog
  become: yes
  when: tz.changed
  service:
    name: rsyslog
    state: restarted
- name: install some apt packs on nodes
  become: yes
  apt:
    name: "{{ aptpacks }}"
    state: present
    update_cache: yes
- name: ensure ntp sevice is started
  become: yes
  service:
    name: ntp
    state: started
    enabled: yes
- name: update ntp config file on ln node
  become: yes
  template:
    src: ../templates/ntp.conf
    dest: /etc/ntp.conf
    owner: root
    backup: yes
  register: lnntp
  when: inventory_hostname in groups['ln']
- name: restart ntp service on lg node
  become: yes
  service:
    name: ntp
    state: restarted
  when: inventory_hostname in groups['ln'] and lnntp.changed
- name: update ntp config file on cn nodes
  become: yes
  lineinfile:
    path: /etc/ntp.conf
    regexp: "^server .*$"
    line: "server {{ master_name }}  prefer"
  register: ntpconfig
  when: inventory_hostname in groups['cn']
- name: restart ntp service on cn nodes
  become: yes
  service:
    name: ntp
    state: restarted
  when: inventory_hostname in groups['cn'] and ntpconfig.changed
- name: install nfs server on ln node
  become: yes
  apt:
    name: nfs-kernel-server
    state: present
  when: inventory_hostname in groups['sn']
- name: update nfs config file on ln node
  become: yes
  template:
    src: ../templates/exports
    dest: /etc/exports
    backup: yes
    owner: root
  register: lnnfs
  when: inventory_hostname in groups['sn']
- name: ensure nfs service start on ln node
  become: yes
  service:
    name: nfs-kernel-server
    state: started
  when: inventory_hostname in groups['sn']
- name: restart nfs service
  become: yes
  service:
    name: nfs-kernel-server
    state: restarted
  when: lnnfs.changed and inventory_hostname in groups['sn']
- name: mount localdisk
  become: yes
  mount:
    path: "{{ item.mnt }}"
    src: "{{ item.dev }}"
    fstype: ext4
    state: mounted
  when: inventory_hostname == item.host
  with_items: "{{ local_disk }}"
- name: make sure the mount dir exist in cn nodes
  when: inventory_hostname != item.host
  become: yes
  file:
    path: "{{ item.mnt }}"
    state: directory
  with_items: "{{ nfs_dir }}"
- name: mount dir on all other nodes
  become: yes
  mount:
    name: "{{ item.mnt }}"
    src: "{{ item.host }}:{{ item.dir }}"
    fstype: nfs
    state: mounted
  when: inventory_hostname != item.host
  with_items: "{{ nfs_dir }}"
- name: update ssh config in all nodes
  become: yes
  copy:
    src: sshd_config
    dest: /etc/ssh/sshd_config
    backup: yes
  register: sshdupdate
- name: ensure ssh server is started
  become: yes
  service:
    name: sshd
    state: started
- name: restart ssh
  become: yes
  service:
    name: sshd
    state: restarted
  when: sshdupdate.changed
- name: remove welcome message
  become: yes
  file:
    path: /etc/update-motd.d/
    mode: '0644'
    state: directory
    recurse: yes
- name: postfix config
  become: yes
  template:
    src: main.cf
    dest: /etc/postfix/main.cf
    backup: yes
  register: postconf
- name: ensure postfix running
  service:
    name: postfix
    state: started
    enabled: yes
  become: yes
- name: reload postfix
  service:
    name: postfix
    state: reloaded
  become: yes
  when: postconf.changed
